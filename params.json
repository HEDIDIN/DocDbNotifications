{"name":"Notifications for new or modified DocumentDB Resources","tagline":"Notifications ","body":"# DocDbNotifications\r\nDocumentDB Notifications Tutorial\r\n\r\n# Notifications for new or modified DocumentDB Resources\r\n\r\nThis article came about from a question I saw posted.  The question was “Does DocumentDB support notifications for modified resources?” \r\n\r\nI have worked with BizTalk Server for many years, and this is a very common scenario when using the [WCF LOB Adapter](https://msdn.microsoft.com/en-us/library/bb798128.aspx) .  So I decided to see if I could duplicate this functionality in DocumentDB for new and/ or modified documents. \r\n\r\n## You start off with a Use Cases.  \r\nThe following story is the Use Case for this article.\r\n\r\n> DocumentDB is the repository for HL7 FHIR documents.  Let’s assume that your DocumentDB Database combined with API and Logic App make up an HL7 FHIR Server.  A Healthcare facility is storing Patient data in the DocumentDB ‘Patients’ database. \r\nThere are several Collections within the Patient database; Clinical, Identification, etc.. Patient information falls under Identification.  You have a collection named “Patient”.\r\n\r\n> The Cardiology department is tracking personal heath and exercise data.  Searching for new or modified Patient records is time consuming.  They asked the IT department if there was a way that they could receive a notification for new or modified Patient records.  \r\n\r\n> The IT department said that they could easily provide this. They also said that they could push the documents to Google Drive so the Cardiology department could easily access them.\r\n\r\n## This is how the IT department solved the problem.\r\n\r\nIn order to create this application, I decided to model it first.  I like using Business Process Model and Notation (BPMN) because both technical and non-technical can easily understand it. I consider this a business process. \r\n\r\n## High-Level View of Notification Process\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/High%20Level%20View.png)\r\n\r\n1. You start off with a Logic App the has a Timer Trigger. The default value is to run every hour.\r\n1. Next you do a Http Post to the Logic App which does all the work.\r\n\r\n### Let’s take a look at what this Logic App does\r\nIf you look at the following figure there are several steps in the workflow.\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/Main%20Logic%20App%20process.png)\r\n\r\nThese steps are as follows.\r\n1. You need to get the current UTC DateTime from an API App.  The default value is one hour previous.\r\n1. Then it’s converted to a Unix Timestamp format. This is the default format for timestamps in DocumentDB.\r\n1. You POST the value to an API App, which does a DocumentDB query. The value is used in a query. ``“SELECT * FROM Patients p WHERE (p._ts >= @value)”\r\n\r\n> NOTE: The _ts represents the TimeStamp metadata for all DocumentDB resources.\r\n1. If there are documents found, the response body is sent to you Google Drive.\r\n1. Finally, an email is sent that notifies the recipient of the number of documents found. If no documents were found, the email body would be “0 Documents Found”. \r\n\r\nNow that you have an idea of what the workflow does, let’s take a look at how you implement it.\r\n\r\n### Let’s start with the main Logic App.\r\nWhen you create a new Logic App, your are presented with “How would you like to start?” \r\nWhen you click inside the text box,  you have a choice of events. For this Logic App, you select “Manual – When a HTTP request is received” as shown below.\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/starting.off.png)\r\n\r\n### Design View of your completed Logic App\r\nThe following figure show the design view for the Logic App, which is named DocDB.\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/LogicApp.Workflow.png)\r\n\r\nWhen editing the actions in the Logic App Designer, you have the option of selecting **Outputs **from the Http Request or from the previous action as shown in the sendMail action below.\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/choose.outputs.png)\r\n\r\nBefore each action in your workflow,  you can make a decision; ** Add an action **or **Add a condition **as shown in the following figure.\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/add.action.or.condition.png)\r\n\r\nIf you select **Add a condition**, you are presented with a form, as shown in the following figure, to enter your logic.  This is in essence, a business rule.  If you click inside a field, you have a choice of selecting parameters from the previous action.  You can also enter the values directly.\r\n\r\n> TIP: You also have the capability to enter everything in Code View.\r\n\r\nLet’s take a look at the completed Logic App in code view.  \r\n\r\n   \t{\r\n\t    \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2015-08-01-preview/workflowdefinition.json#\",\r\n\t    \"actions\": {\r\n\t\t\"Conversion\": {\r\n\t\t    \"conditions\": [\r\n\t\t\t{\r\n\t\t\t    \"dependsOn\": \"GetUtcDate\"\r\n\t\t\t}\r\n\t\t    ],\r\n\t\t    \"inputs\": {\r\n\t\t\t\"method\": \"post\",\r\n\t\t\t\"queries\": {\r\n\t\t\t    \"currentDateTime\": \"@{body('GetUtcDate')}\"\r\n\t\t\t},\r\n\t\t\t\"uri\": \"https://docdbnotificationapi-debug.azurewebsites.net/api/Conversion\"\r\n\t\t    },\r\n\t\t    \"metadata\": {\r\n\t\t\t\"apiDefinitionUrl\": \"https://docdbnotificationapi-debug.azurewebsites.net/swagger/docs/v1\"\r\n\t\t    },\r\n\t\t    \"type\": \"Http\"\r\n\t\t},\r\n\t\t\"Create_file\": {\r\n\t\t    \"conditions\": [\r\n\t\t\t{\r\n\t\t\t    \"dependsOn\": \"GetDocuments\"\r\n\t\t\t}\r\n\t\t    ],\r\n\t\t    \"inputs\": {\r\n\t\t\t\"body\": \"@decodeDataUri(concat('data:application/octet-stream,',encodeURIComponent(string(body('GetDocuments')))))\",\r\n\t\t\t\"host\": {\r\n\t\t\t    \"api\": {\r\n\t\t\t\t\"runtimeUrl\": \"https://logic-apis-westus.azure-apim.net/apim/googledrive\"\r\n\t\t\t    },\r\n\t\t\t    \"connection\": {\r\n\t\t\t\t\"name\": \"@parameters('$connections')['googledrive']['connectionId']\"\r\n\t\t\t    }\r\n\t\t\t},\r\n\t\t\t\"method\": \"post\",\r\n\t\t\t\"path\": \"/datasets/default/files\",\r\n\t\t\t\"queries\": {\r\n\t\t\t    \"folderPath\": \"/Patient\",\r\n\t\t\t    \"name\": \"Patient_@{guid()}.json\"\r\n\t\t\t}\r\n\t\t    },\r\n\t\t    \"type\": \"ApiConnection\"\r\n\t\t},\r\n\t\t\"GetDocuments\": {\r\n\t\t    \"conditions\": [\r\n\t\t\t{\r\n\t\t\t    \"dependsOn\": \"Conversion\"\r\n\t\t\t}\r\n\t\t    ],\r\n\t\t    \"inputs\": {\r\n\t\t\t\"method\": \"post\",\r\n\t\t\t\"queries\": {\r\n\t\t\t    \"unixTimeStamp\": \"@{body('Conversion')}\"\r\n\t\t\t},\r\n\t\t\t\"uri\": \"https://docdbnotificationapi-debug.azurewebsites.net/api/Patient\"\r\n\t\t    },\r\n\t\t    \"metadata\": {\r\n\t\t\t\"apiDefinitionUrl\": \"https://docdbnotificationapi-debug.azurewebsites.net/swagger/docs/v1\"\r\n\t\t    },\r\n\t\t    \"type\": \"Http\"\r\n\t\t},\r\n\t\t\"GetUtcDate\": {\r\n\t\t    \"conditions\": [],\r\n\t\t    \"inputs\": {\r\n\t\t\t\"method\": \"get\",\r\n\t\t\t\"queries\": {\r\n\t\t\t    \"hoursBack\": \"@{int(triggerBody()['GetUtcDate_HoursBack'])}\"\r\n\t\t\t},\r\n\t\t\t\"uri\": \"https://docdbnotificationapi-debug.azurewebsites.net/api/Authorization\"\r\n\t\t    },\r\n\t\t    \"metadata\": {\r\n\t\t\t\"apiDefinitionUrl\": \"https://docdbnotificationapi-debug.azurewebsites.net/swagger/docs/v1\"\r\n\t\t    },\r\n\t\t    \"type\": \"Http\"\r\n\t\t},\r\n\t\t\"sendMail\": {\r\n\t\t    \"conditions\": [\r\n\t\t\t{\r\n\t\t\t    \"dependsOn\": \"GetDocuments\"\r\n\t\t\t}\r\n\t\t    ],\r\n\t\t    \"inputs\": {\r\n\t\t\t\"body\": \"api_user=@{triggerBody()['sendgridUsername']}&api_key=@{triggerBody()['sendgridPassword']}&from=@{parameters('fromAddress')}&to=@{triggerBody()['EmailTo']}&subject=@{triggerBody()['Subject']}&text=@{int(length(body('GetDocuments')))} Documents Found\",\r\n\t\t\t\"headers\": {\r\n\t\t\t    \"Content-type\": \"application/x-www-form-urlencoded\"\r\n\t\t\t},\r\n\t\t\t\"method\": \"POST\",\r\n\t\t\t\"uri\": \"https://api.sendgrid.com/api/mail.send.json\"\r\n\t\t    },\r\n\t\t    \"type\": \"Http\"\r\n\t\t}\r\n\t    },\r\n\t    \"contentVersion\": \"1.0.0.0\",\r\n\t    \"outputs\": {\r\n\t\t\"Results\": {\r\n\t\t    \"type\": \"String\",\r\n\t\t    \"value\": \"@{int(length(body('GetDocuments')))} Records Found\"\r\n\t\t}\r\n\t    },\r\n\t    \"parameters\": {\r\n\t\t\"$connections\": {\r\n\t\t    \"defaultValue\": {},\r\n\t\t    \"type\": \"Object\"\r\n\t\t},\r\n\t\t\"fromAddress\": {\r\n\t\t    \"defaultValue\": \"XXX@XXX.com\",\r\n\t\t    \"type\": \"String\"\r\n\t\t},\r\n\t\t\"toAddress\": {\r\n\t\t    \"defaultValue\": \"XXXXX@XXXXX.com\",\r\n\t\t    \"type\": \"String\"\r\n\t\t}\r\n\t    },\r\n\t    \"triggers\": {\r\n\t\t\"manual\": {\r\n\t\t    \"inputs\": {\r\n\t\t\t\"schema\": {\r\n\t\t\t    \"properties\": {},\r\n\t\t\t    \"required\": [],\r\n\t\t\t    \"type\": \"object\"\r\n\t\t\t}\r\n\t\t    },\r\n\t\t    \"type\": \"Manual\"\r\n\t\t}\r\n\t    }\r\n\t}\r\n\r\nIf you are not familiar with what the different sections in the code represents, you can view the [ Logic App Workflow Definition Language](https://azure.microsoft.com/en-us/documentation/articles/app-service-logic-what-are-logic-apps/) documentation.\r\n\r\nFor this workflow you are using an [ HTTP Webhook Trigger ](https://sendgrid.com/blog/whats-webhook/). If you look at the code above, you will see parameters like the following example.\r\n   =@{triggerBody()['Subject']}\r\n\r\nThe triggerBody() represents the parameters that are included in the body of an REST POST to the Logic App REST API. The ()['Subject'] represents the field. All these parameters make up the JSON formatted body. \r\n\r\n> TIP: By using a Web hook, you can have full access to the header and body of the trigger’s request. In this application you want the body.\r\n\r\nAs mentioned previously, you can use the designer to assign parameters or do it in code view.\r\nIf you do it in code view, then you define which properties require a value as shown in the following code sample. \r\n\r\n\r\n\t\"triggers\": {\r\n\t\t\"manual\": {\r\n\t\t    \"inputs\": {\r\n\t\t\t\"schema\": {\r\n\t\t\t    \"properties\": {\r\n\t\t\t\"Subject\": {\r\n\t\t\t    \"type\" : \"String\"\t\r\n\r\n\t\t\t}\r\n\t\t\t},\r\n\t\t\t    \"required\": [\r\n\t\t\t\"Subject\"\r\n\t\t\t     ],\r\n\t\t\t    \"type\": \"object\"\r\n\t\t\t}\r\n\t\t    },\r\n\t\t    \"type\": \"Manual\"\r\n\t\t}\r\n\t    }\r\n\r\n\r\nWhat you are doing is creating a JSON schema. that will be passed in from the body of the Http POST.\r\nTo fire your trigger, you will need a CallbackURL.  You will learn how to generate it further down in the tutorial.  \r\n\r\n## Actions\r\nLet’s see what each action does.\r\n\r\n### GetUTCDate\r\n\r\nDesigner View\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/getutcdate.png)\r\n\r\n**Code View**\r\n\r\n\r\n\t\"GetUtcDate\": {\r\n\t\t    \"conditions\": [],\r\n\t\t    \"inputs\": {\r\n\t\t\t\"method\": \"get\",\r\n\t\t\t\"queries\": {\r\n\t\t\t    \"hoursBack\": \"@{int(triggerBody()['GetUtcDate_HoursBack'])}\"\r\n\t\t\t},\r\n\t\t\t\"uri\": \"https://docdbnotificationapi-debug.azurewebsites.net/api/Authorization\"\r\n\t\t    },\r\n\t\t    \"metadata\": {\r\n\t\t\t\"apiDefinitionUrl\": \"https://docdbnotificationapi-debug.azurewebsites.net/swagger/docs/v1\"\r\n\t\t    },\r\n\t\t    \"type\": \"Http\"\r\n\t\t},\r\n\r\n\r\nThis HTTP action performs a GET operation.  It calls the API APP GetUtcDate method. The Uri uses the 'GetUtcDate_HoursBack'  property passed into the Trigger body.  The 'GetUtcDate_HoursBack' value is set in the first Logic App.  (You will learn more about the Trigger Logic App later in the tutorial.\r\n\r\nThis action calls your API App to return the Utc Date string value.\r\n\r\n#### Operations\r\n\r\n**Request**\r\n\r\n\r\n\t{\r\n\t    \"uri\": \"https://docdbnotificationapi-debug.azurewebsites.net/api/Authorization\",\r\n\t    \"method\": \"get\",\r\n\t    \"queries\": {\r\n\t\t\"hoursBack\": \"24\"\r\n\t    }\r\n\t}\r\n\r\n\r\n**Response**\r\n\r\n\r\n\t{\r\n\t    \"statusCode\": 200,\r\n\t    \"headers\": {\r\n\t\t\"pragma\": \"no-cache\",\r\n\t\t\"cache-Control\": \"no-cache\",\r\n\t\t\"date\": \"Fri, 26 Feb 2016 15:47:33 GMT\",\r\n\t\t\"server\": \"Microsoft-IIS/8.0\",\r\n\t\t\"x-AspNet-Version\": \"4.0.30319\",\r\n\t\t\"x-Powered-By\": \"ASP.NET\"\r\n\t    },\r\n\t    \"body\": \"Fri, 15 Jan 2016 23:47:33 GMT\"\r\n\t}\r\n\r\n\r\nThe next step is too convert the UTC DateTime value to the Unix TimeStamp, which is a NET double type.\r\n\r\n### Conversion\r\n\r\nDesigner View\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/Conversion.png)\r\n\r\nCode View\r\n\r\n\r\n\t\"Conversion\": {\r\n\t    \"conditions\": [\r\n\t\t{\r\n\t\t    \"dependsOn\": \"GetUtcDate\"\r\n\t\t}\r\n\t    ],\r\n\t    \"inputs\": {\r\n\t\t\"method\": \"post\",\r\n\t\t\"queries\": {\r\n\t\t    \"currentDateTime\": \"@{body('GetUtcDate')}\"\r\n\t\t},\r\n\t\t\"uri\": \"https://docdbnotificationapi-debug.azurewebsites.net/api/Conversion\"\r\n\t    },\r\n\t    \"metadata\": {\r\n\t\t\"apiDefinitionUrl\": \"https://docdbnotificationapi-debug.azurewebsites.net/swagger/docs/v1\"\r\n\t    },\r\n\t    \"type\": \"Http\"\r\n\t},\r\n\r\n\r\nIn this step you pass in the value returned from the GetUTCDate.  There is a dependsOn condition, which means that the GetUTCDate action must complete successfully. If not then this action is skipped. \r\n\r\nThis action calls your API App to handle the conversion.\r\n\r\n#### Operations\r\n\r\n**Request**\r\n\r\n\r\n\t{\r\n\t    \"uri\": \"https://docdbnotificationapi-debug.azurewebsites.net/api/Conversion\",\r\n\t    \"method\": \"post\",\r\n\t    \"queries\": {\r\n\t\t\"currentDateTime\": \"Fri, 15 Jan 2016 23:47:33 GMT\"\r\n\t    }\r\n\t}   \r\n\r\n\r\n**Response**\r\n\r\n\r\n\t{\r\n\t    \"statusCode\": 200,\r\n\t    \"headers\": {\r\n\t\t\"pragma\": \"no-cache\",\r\n\t\t\"cache-Control\": \"no-cache\",\r\n\t\t\"date\": \"Fri, 26 Feb 2016 15:47:33 GMT\",\r\n\t\t\"server\": \"Microsoft-IIS/8.0\",\r\n\t\t\"x-AspNet-Version\": \"4.0.30319\",\r\n\t\t\"x-Powered-By\": \"ASP.NET\"\r\n\t    },\r\n\t    \"body\": 1452901653\r\n\t}\r\n\r\n\r\nIn the next action, you will do a POST operation to our API App.\r\n\r\n### GetDocuments \r\n\r\nDesigner View\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/GetDocuments.png)\r\n\r\nCode View\r\n\r\n\r\n\t\"GetDocuments\": {\r\n\t    \"conditions\": [\r\n\t\t{\r\n\t\t    \"dependsOn\": \"Conversion\"\r\n\t\t}\r\n\t    ],\r\n\t    \"inputs\": {\r\n\t\t\"method\": \"post\",\r\n\t\t\"queries\": {\r\n\t\t    \"unixTimeStamp\": \"@{body('Conversion')}\"\r\n\t\t},\r\n\t\t\"uri\": \"https://docdbnotificationapi-debug.azurewebsites.net/api/Patient\"\r\n\t    },\r\n\t    \"metadata\": {\r\n\t\t\"apiDefinitionUrl\": \"https://docdbnotificationapi-debug.azurewebsites.net/swagger/docs/v1\"\r\n\t    },\r\n\t    \"type\": \"Http\"\r\n\t},\r\n\r\n\r\nFor the GetDocuments action you are going to pass in the response body from the Conversion action. This is a parameter in the Uri; unixTimeStamp=@{body('Conversion')}\r\n\r\nThe QueryDocuments action does a Http POST operation to the API App. . \r\n\r\nThe method called is **QueryForNewPatientDocuments**\r\n\r\n#### Operations\r\n\r\n**Request**\r\n\r\n\r\n\t{\r\n\t    \"uri\": \"https://docdbnotificationapi-debug.azurewebsites.net/api/Patient\",\r\n\t    \"method\": \"post\",\r\n\t    \"queries\": {\r\n\t\t\"unixTimeStamp\": \"1452901653\"\r\n\t    }\r\n\t}\r\n\r\n\r\n**Response**\r\n\r\n\r\n\t{\r\n\t    \"statusCode\": 200,\r\n\t    \"headers\": {\r\n\t\t\"pragma\": \"no-cache\",\r\n\t\t\"cache-Control\": \"no-cache\",\r\n\t\t\"date\": \"Fri, 26 Feb 2016 15:47:35 GMT\",\r\n\t\t\"server\": \"Microsoft-IIS/8.0\",\r\n\t\t\"x-AspNet-Version\": \"4.0.30319\",\r\n\t\t\"x-Powered-By\": \"ASP.NET\"\r\n\t    },\r\n\t    \"body\": [\r\n\t\t{\r\n\t\t    \"id\": \"xcda\",\r\n\t\t    \"_rid\": \"vCYLAP2k6gAXAAAAAAAAAA==\",\r\n\t\t    \"_self\": \"dbs/vCYLAA==/colls/vCYLAP2k6gA=/docs/vCYLAP2k6gAXAAAAAAAAAA==/\",\r\n\t\t    \"_ts\": 1454874620,\r\n\t\t    \"_etag\": \"\\\"00007d01-0000-0000-0000-56b79ffc0000\\\"\",\r\n\t\t    \"resourceType\": \"Patient\",\r\n\t\t    \"text\": {\r\n\t\t\t\"status\": \"generated\",\r\n\t\t\t\"div\": \"<div>\\n      \\n      <p>Henry Levin the 7th</p>\\n    \\n    </div>\"\r\n\t\t    },\r\n\t\t    \"identifier\": [\r\n\t\t\t{\r\n\t\t\t    \"use\": \"usual\",\r\n\t\t\t    \"type\": {\r\n\t\t\t\t\"coding\": [\r\n\t\t\t\t    {\r\n\t\t\t\t\t\"system\": \"http://hl7.org/fhir/v2/0203\",\r\n\t\t\t\t\t\"code\": \"MR\"\r\n\t\t\t\t    }\r\n\t\t\t\t]\r\n\t\t\t    },\r\n\t\t\t    \"system\": \"urn:oid:2.16.840.1.113883.19.5\",\r\n\t\t\t    \"value\": \"12345\"\r\n\t\t\t}\r\n\t\t    ],\r\n\t\t    \"active\": true,\r\n\t\t    \"name\": [\r\n\t\t\t{\r\n                    \"family\": [\r\n                        \"Levin\"\r\n                    ],\r\n                    \"given\": [\r\n                        \"Henry\"\r\n                    ]\r\n                }\r\n            ],\r\n            \"gender\": \"male\",\r\n            \"birthDate\": \"1932-09-24\",\r\n            \"managingOrganization\": {\r\n                \"reference\": \"Organization/2.16.840.1.113883.19.5\",\r\n                \"display\": \"Good Health Clinic\"\r\n            }\r\n        },\r\n\r\n\r\n\r\nThe next action is to save the documents to Google Drive. \r\n\r\n### Create File\r\n\r\nDesigner View\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/CreateFile.png)\r\n\r\nCode View\r\n\r\n\r\n\t\"Create_file\": {\r\n\t    \"conditions\": [\r\n\t\t{\r\n\t\t    \"dependsOn\": \"GetDocuments\"\r\n\t\t}\r\n\t    ],\r\n\t    \"inputs\": {\r\n\t\t\"body\": \"@decodeDataUri(concat('data:application/octet-stream,',encodeURIComponent(string(body('GetDocuments')))))\",\r\n\t\t\"host\": {\r\n\t\t    \"api\": {\r\n\t\t\t\"runtimeUrl\": \"https://logic-apis-westus.azure-apim.net/apim/googledrive\"\r\n\t\t    },\r\n\t\t    \"connection\": {\r\n\t\t\t\"name\": \"@parameters('$connections')['googledrive']['connectionId']\"\r\n\t\t    }\r\n\t\t},\r\n\t\t\"method\": \"post\",\r\n\t\t\"path\": \"/datasets/default/files\",\r\n\t\t\"queries\": {\r\n\t\t    \"folderPath\": \"/Patient\",\r\n\t\t    \"name\": \"Patient_@{guid()}.json\"\r\n\t\t}\r\n\t    },\r\n\t    \"type\": \"ApiConnection\"\r\n\t},\r\n\r\n\r\nThe code is generated from action in the designer. You don’t have to modify the code.\r\n\r\nIf you are not familiar with using the Google Drive Api,  you can view the documentation [here](https://azure.microsoft.com/en-us/documentation/articles/create-api-googledrive/).\r\n\r\n#### Operations\r\n\r\n**Request**\r\n\r\n\r\n\t\"host\": {\r\n\t\t\"api\": {\r\n\t\t    \"runtimeUrl\": \"https://logic-apis-westus.azure-apim.net/apim/googledrive\"\r\n\t\t},\r\n\t\t\"connection\": {\r\n\t\t    \"name\": \"subscriptions/f1334a6f-c079-4e5d-b002-e80326d2492c/resourceGroups/Api-Default-Central-US/providers/Microsoft.Web/connections/F6805CA2-462C-4D28-86D7-4C4E6953EC0F\"\r\n\t\t}\r\n\t\t},\r\n\t\t\"method\": \"post\",\r\n\t\t\"path\": \"/datasets/default/files\",\r\n\t\t\"queries\": {\r\n\t\t\"folderPath\": \"/Patient\",\r\n\t\t\"name\": \"Patient_47a2a0dc-640d-4f01-be38-c74690d085cb.json\"\r\n\t\t},\r\n\t\t\"body\": {\r\n\t\t\"$content-encoding\": null,\r\n\t\t\"$content-type\": \"application/octet-stream;charset=us-ascii\",\r\n\t\t\"$content\": \"W3siaWQiOiJ4Y2RhIiwiX3JpZCI6InZDWUxBUDJrNmdBWEFBQUFBQUFBQUE9PSIsIl9zZWxmIjoiZGJzL3ZDWUxBQT09L2NvbGxzL3ZDWUxBUDJrNmdBPS9kb2NzL3ZDWUxBUDJrNmdBWEFBQUFBQUFBQUE9PS8iLCJfdHMiOjE0NTQ4NzQ2MjAsIl9ldGFnIjoiXCIwMDAwN2QwMS0wMDAwLTAwMDAtMDAwMC01NmI3OWZmYzAwMDBcIiIsInJlc291cmNlVHlwZSI6IlBhdGllbnQiLCJ0ZXh0Ijp7InN0YXR1cyI6ImdlbmVyYXRlZCIsImRpdiI6IjxkaXY+XG4gICAgICBcbiAgICAgIDxwPkhlbnJ5IExldmluIHRoZSA3dGg8L3A+XG4gICAgXG4gICAgPC9kaXY+In0sImlkZW50aWZpZXIiOlt7InVzZSI6InVzdWFsIiwidHlwZSI6eyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9obDcub3JnL2ZoaXIvdjIvMDIwMyIsImNvZGUiOiJNUiJ9XX0sInN5c3RlbSI6InVybjpvaWQ6Mi4xNi44NDAuMS4xMTM4ODMuMTkuNSIsInZhbHVlIjoiMTIzNDUifV0sImFjdGl2ZSI6dHJ1ZSwibmFtZSI6W3siZmFtaWx5IjpbIkxldmluIl0sImdpdmVuIjpbIkhlbnJ5Il19XSwiZ2VuZGVyIjoibWFsZSIsImJpcnRoRGF0ZSI6IjE5MzItMDktMjQiLCJtYW5hZ2luZ09yZ2FuaXphdGlvbiI6eyJyZWZlcmVuY2UiOiJPcmdhbml6YXRpb24vMi4xNi44NDAuMS4xMTM4ODMuMTkuNSIsImRpc3BsYXkiOiJHb29kIEhlYWx0aCBDbGluaWMifX0seyJpZCI6InVzMDEiLCJfcmlkIjoidkNZTEFQMms2Z0FaQUFBQUFBQUFBQT09IiwiX3NlbGYiOiJkYnMvdkNZTEFBPT0vY29sbHMvdkNZTEFQMms2Z0E9L2RvY3MvdkNZTEFQMms2Z0FaQUFBQUFBQUFBQT09LyIsIl90cyI6MTQ1NDg3NDYyMCwiX2V0YWciOiJcIjAwMDA3ZjAxLTAwMDAtMDAwMC0wMDAwLTU2Yjc5ZmZjMDAwMFwiIiwicmVzb3VyY2VUeXBlIjoiUGF0aWVudC......\r\n\r\n**Response**\r\n\r\n\r\n\t{\r\n\t    \"statusCode\": 200,\r\n\t    \"headers\": {\r\n\t\t\"pragma\": \"no-cache\",\r\n\t\t\"x-ms-request-id\": \"2b2f7c57-2623-4d71-8e53-45c26b30ea9d\",\r\n\t\t\"cache-Control\": \"no-cache\",\r\n\t\t\"date\": \"Fri, 26 Feb 2016 15:47:36 GMT\",\r\n\t\t\"set-Cookie\": \"ARRAffinity=29e552cea7db23196f7ffa644003eaaf39bc8eb6dd811911f669d13ab7424faf;Path=/;Domain=127.0.0.1\",\r\n\t\t\"server\": \"Microsoft-HTTPAPI/2.0\",\r\n\t\t\"x-AspNet-Version\": \"4.0.30319\",\r\n\t\t\"x-Powered-By\": \"ASP.NET\"\r\n\t    },\r\n\t    \"body\": {\r\n\t\t\"Id\": \"0B0nBzHyMV-_NRGRDcDNMSFAxWFE\",\r\n\t\t\"Name\": \"Patient_47a2a0dc-640d-4f01-be38-c74690d085cb.json\",\r\n\t\t\"DisplayName\": \"Patient_47a2a0dc-640d-4f01-be38-c74690d085cb.json\",\r\n\t\t\"Path\": \"/Patient/Patient_47a2a0dc-640d-4f01-be38-c74690d085cb.json\",\r\n\t\t\"LastModified\": \"2016-02-26T15:47:36.215Z\",\r\n\t\t\"Size\": 65647,\r\n\t\t\"MediaType\": \"application/octet-stream\",\r\n\t\t\"IsFolder\": false,\r\n\t\t\"ETag\": \"\\\"c-g_a-1OtaH-kNQ4WBoXLp3Zv9s/MTQ1NjUwMTY1NjIxNQ\\\"\",\r\n\t\t\"FileLocator\": \"0B0nBzHyMV-_NRGRDcDNMSFAxWFE\"\r\n\t    }\r\n\t}\r\n\r\n\r\nYour last step is to send an email notification\r\n\r\n### sendEmail\r\n\r\nDesigner View\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/SendEmail.png)\r\n\r\nCode View\r\n\r\n\r\n\t\"sendMail\": {\r\n\t    \"conditions\": [\r\n\t\t{\r\n\t\t    \"dependsOn\": \"GetDocuments\"\r\n\t\t}\r\n\t    ],\r\n\t    \"inputs\": {\r\n\t\t\"body\": \"api_user=@{triggerBody()['sendgridUsername']}&api_key=@{triggerBody()['sendgridPassword']}&from=@{parameters('fromAddress')}&to=@{triggerBody()['EmailTo']}&subject=@{triggerBody()['Subject']}&text=@{int(length(body('GetDocuments')))} Documents Found\",\r\n\t\t\"headers\": {\r\n\t\t    \"Content-type\": \"application/x-www-form-urlencoded\"\r\n\t\t},\r\n\t\t\"method\": \"POST\",\r\n\t\t\"uri\": \"https://api.sendgrid.com/api/mail.send.json\"\r\n\t    },\r\n\t    \"type\": \"Http\"\r\n\t}\r\n\r\n\r\nIn this action you send an email notification.  You are using [SendGrid](https://sendgrid.com/marketing/sendgrid-services?cvosrc=PPC.Bing.sendgrib&cvo_cid=SendGrid%20-%20US%20-%20Brand%20-%20(English)&mc=Paid%20Search&mcd=BingAds&keyword=sendgrib&network=o&matchtype=e&mobile=&content=&search=1&utm_source=bing&utm_medium=cpc&utm_term=%5Bsendgrib%5D&utm_content=%21acq%21v2%2134335083397-8303227637-1649139544&utm_campaign=SendGrid+-+US+-+Brand+-+%28English%29).   \r\n\r\nThe code for this was generated using a Template for Logic App and SendGrid that is in the template Github repository.\r\n \r\nThe Http operation is a POST. \r\n\r\nThe authorization parameters are in the trigger properties\r\n\r\n\t},\r\n\t\t\"sendgridPassword\": {\r\n\t\t\t \"type\": \"SecureString\"\r\n\t\t },\r\n\t\t \"sendgridUsername\": {\r\n\t\t\t\"type\": \"String\"\r\n\t\t }\r\n\r\n\t\tIn addition, other parameters are static values set in the Parameters section of the Logic App. These are:\r\n\t\t},\r\n\t\t\"toAddress\": {\r\n\t\t    \"defaultValue\": \"XXXX@XXXX.com\",\r\n\t\t    \"type\": \"String\"\r\n\t\t},\r\n\t\t\"fromAddress\": {\r\n\t\t    \"defaultValue\": \"XXX@msn.com\",\r\n\t\t    \"type\": \"String\"\r\n\t\t},\r\n\t\t\"emailBody\": {\r\n\t\t    \"defaultValue\": \"@{string(concat(int(length(actions('QueryDocuments').outputs.body)) Records Found),'/n', actions('QueryDocuments').outputs.body)}\",\r\n\t\t    \"type\": \"String\"\r\n\t\t},\r\n\r\n\r\nThe emailBody is concatenating the number of Documents returned from the query, which can be “0” or more, along with,  “Records Found”.  The rest of the parameters are set from the Trigger parameters.\r\n\r\nThis action depends on the **GetDocuments **action.\r\n\r\n#### Operations\r\n**Request**\r\n\r\n\t{\r\n\t    \"uri\": \"https://api.sendgrid.com/api/mail.send.json\",\r\n\t    \"method\": \"POST\",\r\n\t    \"headers\": {\r\n\t\t\"Content-type\": \"application/x-www-form-urlencoded\"\r\n\t    },\r\n\t    \"body\": \"api_user=azure_9d8ef133bd48205fbc841ef82aaa6808@azure.com&api_key=Biz@Talk&from=hse@msn.com&to=hedidin@edidingroup.net&subject=New Patients&text=37 Documents Found\"\r\n\t}\r\n\r\n**Response**\r\n\t{\r\n\t    \"statusCode\": 200,\r\n\t    \"headers\": {\r\n\t\t\"connection\": \"keep-alive\",\r\n\t\t\"x-Frame-Options\": \"DENY,DENY\",\r\n\t\t\"access-Control-Allow-Origin\": \"https://sendgrid.com\",\r\n\t\t\"date\": \"Fri, 26 Feb 2016 15:47:35 GMT\",\r\n\t\t\"server\": \"nginx\"\r\n\t    },\r\n\t    \"body\": {\r\n\t\t\"message\": \"success\"\r\n\t    }\r\n\t}\r\n\r\nLastly you want to be able to see the results from your Logic App on the Azure Portal. To do that, you add a parameter to the outputs section.\r\n\r\n\r\n\t\"outputs\": {\r\n\t\t\"Results\": {\r\n\t\t    \"type\": \"String\",\r\n\t\t    \"value\": \"@{int(length(actions('QueryDocuments').outputs.body))} Records Found\"\r\n\t\t}\r\n\r\n\r\nThis returns the same value that is sent in the email body. The following figure shows an example where “37 Records Found”\r\n\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/Logic.App.run.png)\r\n\r\n## Metrics\r\nYou can configure Monitoring for the main Logic App in the portal. This would allow you to view the Run Latency and other events as show in the following figure.\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/metrics.png)\r\n\r\n## DocDb Trigger\r\nThis Logic App is the trigger that starts the workflow on your main Logic App.\r\n\r\nThe following figure shows the Designer View.\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/Trigger.Recurrence.png)\r\n\r\n\t{\r\n\t    \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2015-08-01-preview/workflowdefinition.json#\",\r\n\t    \"actions\": {\r\n\t\t\"Http\": {\r\n\t\t    \"conditions\": [],\r\n\t\t    \"inputs\": {\r\n\t\t\t\"body\": {\r\n\t\t\t    \"EmailTo\": \"XXXXXX@XXXXX.net\",\r\n\t\t\t    \"GetUtcDate_HoursBack\": \"24\",\r\n\t\t\t    \"Subject\": \"New Patients\",\r\n\t\t\t    \"sendgridPassword\": \"********\",\r\n\t\t\t    \"sendgridUsername\": \"azure_9d8ef133bd48205fbc841ef82aaa6808@azure.com\"\r\n\t\t\t},\r\n\t\t\t\"method\": \"POST\",\r\n\t\t\t\"uri\": \"https://prod-01.westus.logic.azure.com:443/workflows/12a1de57e46645bc9ce7a247df782887/triggers/manual/run?api-version=2015-08-01-preview&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=ObTlihr529ATIuvuG-dhxOgBL4JZjItrvPQ8PV6973c\"\r\n\t\t    },\r\n\t\t    \"type\": \"Http\"\r\n\t\t}\r\n\t    },\r\n\t    \"contentVersion\": \"1.0.0.0\",\r\n\t    \"outputs\": {\r\n\t\t\"Results\": {\r\n\t\t    \"type\": \"String\",\r\n\t\t    \"value\": \"@{body('Http')['status']}\"\r\n\t\t}\r\n\t    },\r\n\t    \"parameters\": {},\r\n\t    \"triggers\": {\r\n\t\t\"recurrence\": {\r\n\t\t    \"recurrence\": {\r\n\t\t\t\"frequency\": \"Hour\",\r\n\t\t\t\"interval\": 24\r\n\t\t    },\r\n\t\t    \"type\": \"Recurrence\"\r\n\t\t}\r\n\t    }\r\n\t}\r\n\r\n\r\nThe Trigger is set for a recurrence of twenty-four hours. \r\nThe Action is an Http Post that uses the Callback URL for the main Logic App. \r\nThe body contains the parameters that are specified in the JSON Schema. \r\n\r\n#### Operations\r\n\r\n**Request**\r\n\r\n\t{\r\n\t    \"uri\": \"https://prod-01.westus.logic.azure.com:443/workflows/12a1de57e46645bc9ce7a247df782887/triggers/manual/run?api-version=2015-08-01-preview&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=ObTlihr529ATIuvuG-dhxOgBL4JZjItrvPQ8PV6973c\",\r\n\t    \"method\": \"POST\",\r\n\t    \"body\": {\r\n\t\t\"EmailTo\": \"hedidin@edidingroup.net\",\r\n\t\t\"GetUtcDate_HoursBack\": \"24\",\r\n\t\t\"Subject\": \"New Patients\",\r\n\t\t\"sendgridPassword\": \"Biz@Talk\",\r\n\t\t\"sendgridUsername\": \"azure_9d8ef133bd48205fbc841ef82aaa6808@azure.com\"\r\n\t    }\r\n\t}\r\n\r\n\r\n\r\n**Response**\r\n\r\n\t{\r\n\t    \"statusCode\": 202,\r\n\t    \"headers\": {\r\n\t\t\"pragma\": \"no-cache\",\r\n\t\t\"x-ms-ratelimit-remaining-workflow-writes\": \"7486\",\r\n\t\t\"x-ms-ratelimit-burst-remaining-workflow-writes\": \"1248\",\r\n\t\t\"x-ms-request-id\": \"westus:2d440a39-8ba5-4a9c-92a6-f959b8d2357f\",\r\n\t\t\"cache-Control\": \"no-cache\",\r\n\t\t\"date\": \"Thu, 25 Feb 2016 21:01:06 GMT\"\r\n\t    }\r\n\t}\r\n\r\nNow let’s look at the API App.\r\n\r\n## DocDBNotificationApi\r\n\r\nAlthough there are many operations in the app, you are only going to use three.\r\n* GetUtcDate\r\n* ConvertToTimeStamp\r\n* QueryForNewPatientDocuments\r\n\r\n### DocDBNotificationApi Operations\r\nLet’s take a look at the Swagger documentation\r\n\r\n> NOTE: To allow you to call the operations externally, you need to add a CORS allowed origin value of “*” (without quotes) in the settings of your API App as shown in the following figure.\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/Cors.png)\r\n\r\n**GetUtcDate**\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/getutcdateswagger.png)\r\n\r\n**ConvertToTimeStamp**\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/converion%20swagger.png)\r\n\r\n**QueryForNewPatientDocuments**\r\n\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/patientswagger.png)\r\n\r\nLet’s take a look at the code behind this operations\r\n\r\n**GetUtcDate**\r\n\r\n        /// <summary>\r\n\t/// Gets the current UTC Date value\r\n\t/// </summary>\r\n\t/// <returns></returns>\r\n\t[HttpGet]\r\n\t[Metadata(\"GetUtcDate\", \"Gets the current UTC Date value minus the Hours Back\")]\r\n\t[SwaggerOperation(\"GetUtcDate\")]\r\n\t[SwaggerResponse(HttpStatusCode.OK, type: typeof (string))]\r\n\t[SwaggerResponse(HttpStatusCode.InternalServerError, \"Internal Server Operation Error\")]\r\n\tpublic string GetUtcDate(\r\n\t   [Metadata(\"Hours Back\", \"How many hours back from the current Date Time\")] int hoursBack)\r\n\t{\r\n\r\n\r\n\t    return DateTime.UtcNow.AddHours(-hoursBack).ToString(\"r\");\r\n\t}\r\n\r\nThis operation simply returns the returns the current UTC DateTime minus the HoursBack value.\r\n\r\n**ConvertToTimeStamp**\r\n\r\n        /// <summary>\r\n        ///     Converts DateTime to double\r\n        /// </summary>\r\n        /// <param name=\"currentdateTime\"></param>\r\n        /// <returns></returns>\r\n        [Metadata(\"Converts Universal DateTime to number\")]\r\n        [SwaggerResponse(HttpStatusCode.OK, null, typeof (double))]\r\n        [SwaggerResponse(HttpStatusCode.BadRequest, \"DateTime is invalid\")]\r\n        [SwaggerResponse(HttpStatusCode.InternalServerError)]\r\n        [SwaggerOperation(nameof(ConvertToTimestamp))]\r\n        public double ConvertToTimestamp(\r\n            [Metadata(\"currentdateTime\", \"DateTime value to convert\")] string currentdateTime)\r\n        {\r\n            double result;\r\n\r\n            try\r\n            {\r\n                var uncoded = HttpContext.Current.Server.UrlDecode(currentdateTime);\r\n\r\n                var newDateTime = DateTime.Parse(uncoded);\r\n                //create Timespan by subtracting the value provided from the Unix Epoch\r\n                var span = newDateTime - new DateTime(1970, 1, 1, 0, 0, 0, 0).ToLocalTime();\r\n\r\n                //return the total seconds (which is a UNIX timestamp)\r\n                result = span.TotalSeconds;\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                throw new Exception(\"unable to convert to Timestamp\", e.InnerException);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\nThis operation converts the response from the GetUtcDate operation to a double value.\r\n\r\n**QueryForNewPatientDocuments**\r\n\r\n\r\n\t/// <summary>\r\n        ///     Query for new Patient Documents\r\n        /// </summary>\r\n        /// <param name=\"unixTimeStamp\"></param>\r\n        /// <returns>IList</returns>\r\n        [Metadata(\"QueryForNewDocuments\",\r\n            \"Query for new Documents where the Timestamp is greater than or equal to the DateTime value in the query parameters.\"\r\n            )]\r\n        [SwaggerOperation(\"QueryForNewDocuments\")]\r\n        [SwaggerResponse(HttpStatusCode.OK, type: typeof (Task<IList<Document>>))]\r\n        [SwaggerResponse(HttpStatusCode.BadRequest, \"The syntax of the SQL Statement is incoreect\")]\r\n        [SwaggerResponse(HttpStatusCode.NotFound, \"No Documents were found\")]\r\n        [SwaggerResponse(HttpStatusCode.InternalServerError, \"Internal Server Operation Error\")]\r\n        // ReSharper disable once ConsiderUsingAsyncSuffix\r\n        public IList<Document> QueryForNewPatientDocuments(\r\n            [Metadata(\"UnixTimeStamp\", \"The DateTime value used to search from\")] double unixTimeStamp)\r\n        {\r\n            var context = new DocumentDbContext();\r\n            var filterQuery = string.Format(InvariantCulture, \"SELECT * FROM Patient p WHERE p._ts >=  {0}\",\r\n                unixTimeStamp);\r\n            var options = new FeedOptions {MaxItemCount = -1};\r\n\r\n\r\n            var collectionLink = UriFactory.CreateDocumentCollectionUri(DocumentDbContext.DatabaseId,\r\n                DocumentDbContext.CollectionId);\r\n\r\n            var response =\r\n                context.Client.CreateDocumentQuery<Document>(collectionLink, filterQuery, options).AsEnumerable();\r\n\r\n            return response.ToList();\r\n\t}\r\nThis operation uses the DocumentDB NET SDK to create a document query; \r\n\r\n     ``CreateDocumentQuery<Document>(collectionLink, filterQuery, options).AsEnumerable();\r\n\r\n\r\nThe response from the ConvertToTimeStamp operation (unixTimeStamp) is passed in.   The operation returns a List of documents. IList<Document>\r\n\r\nPreviously we talked about the CallbackURL.  In order to start the workflow in you main Logic App, you will need to call it using the CallbackURL.\r\n\r\n## CallbackURL\r\n\r\nTo start off, you will need your Azure AD Token.  It can be difficult to get this token. I was looking for an easy method and Jeff Hollan, who is an Azure Logic App program manager, recommended using the [armclient](http://blog.davidebbo.com/2015/01/azure-resource-manager-client.html)in Powershell.  You can install it following the directions provided.\r\n\r\nThe operations you want to use are Login and Call ARM Api.\r\n \r\nLogin: You use the same credentials for logging in to the Azure Portal. \r\n\r\nThe Call ARM Api operation is the one that will generate your CallBackURL.\r\n\r\nIn Powershell, you call it as follows:\t\r\n\r\n\tArmClient.exe post https://management.azure.com/subscriptions/[YOUR SUBSCRIPTION ID/resourcegroups/[YOUR RESOURCE GROUP]/providers/Microsoft.Logic/workflows/[YOUR LOGIC APP NAME/triggers/manual/listcallbackurl?api-version=2015-08-01-preview\r\n\r\nYour result should look like this:\r\n\r\n\t``https://prod-02.westus.logic.azure.com:443/workflows/508ecbba4eec4f7689422c8d7a40fbac/triggers/manual/run?api-version=2015-08-01-prevaiew&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=XXXXXXXXXXXXXXXXXXX\r\n\r\nYou can use a tool like [postman](http://www.getpostman.com/) to test you main Logic App as shown in the following figure.\r\n![](https://raw.githubusercontent.com/HEDIDIN/DocDbNotifications/master/Images/Postman.png)\r\n\r\n\r\n## Summary\r\n* You have learned that it is possible, to implement Notifications in DocumentDB.\r\n* You discovered that by using Logic Apps, you can automate the process.\r\n* By using Http you can easy consume an API App within a Logic App.\r\n* How easy it is to create a CallBackURL that replaces the Http Listener.\r\n* How easy it is too create custom workflows with Logic Apps Designer\r\n* The key is to plan ahead and model your workflow.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}